// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/faculty.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FacultyService_CreateFaculty_FullMethodName = "/faculty.FacultyService/CreateFaculty"
	FacultyService_GetFaculty_FullMethodName    = "/faculty.FacultyService/GetFaculty"
	FacultyService_UpdateFaculty_FullMethodName = "/faculty.FacultyService/UpdateFaculty"
	FacultyService_DeleteFaculty_FullMethodName = "/faculty.FacultyService/DeleteFaculty"
	FacultyService_ListFaculties_FullMethodName = "/faculty.FacultyService/ListFaculties"
)

// FacultyServiceClient is the client API for FacultyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FacultyServiceClient interface {
	CreateFaculty(ctx context.Context, in *CreateFacultyRequest, opts ...grpc.CallOption) (*FacultyResponse, error)
	GetFaculty(ctx context.Context, in *GetFacultyRequest, opts ...grpc.CallOption) (*FacultyResponse, error)
	UpdateFaculty(ctx context.Context, in *UpdateFacultyRequest, opts ...grpc.CallOption) (*FacultyResponse, error)
	DeleteFaculty(ctx context.Context, in *DeleteFacultyRequest, opts ...grpc.CallOption) (*DeleteFacultyResponse, error)
	ListFaculties(ctx context.Context, in *ListFacultiesRequest, opts ...grpc.CallOption) (*ListFacultiesResponse, error)
}

type facultyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFacultyServiceClient(cc grpc.ClientConnInterface) FacultyServiceClient {
	return &facultyServiceClient{cc}
}

func (c *facultyServiceClient) CreateFaculty(ctx context.Context, in *CreateFacultyRequest, opts ...grpc.CallOption) (*FacultyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FacultyResponse)
	err := c.cc.Invoke(ctx, FacultyService_CreateFaculty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facultyServiceClient) GetFaculty(ctx context.Context, in *GetFacultyRequest, opts ...grpc.CallOption) (*FacultyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FacultyResponse)
	err := c.cc.Invoke(ctx, FacultyService_GetFaculty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facultyServiceClient) UpdateFaculty(ctx context.Context, in *UpdateFacultyRequest, opts ...grpc.CallOption) (*FacultyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FacultyResponse)
	err := c.cc.Invoke(ctx, FacultyService_UpdateFaculty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facultyServiceClient) DeleteFaculty(ctx context.Context, in *DeleteFacultyRequest, opts ...grpc.CallOption) (*DeleteFacultyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFacultyResponse)
	err := c.cc.Invoke(ctx, FacultyService_DeleteFaculty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facultyServiceClient) ListFaculties(ctx context.Context, in *ListFacultiesRequest, opts ...grpc.CallOption) (*ListFacultiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFacultiesResponse)
	err := c.cc.Invoke(ctx, FacultyService_ListFaculties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FacultyServiceServer is the server API for FacultyService service.
// All implementations must embed UnimplementedFacultyServiceServer
// for forward compatibility.
type FacultyServiceServer interface {
	CreateFaculty(context.Context, *CreateFacultyRequest) (*FacultyResponse, error)
	GetFaculty(context.Context, *GetFacultyRequest) (*FacultyResponse, error)
	UpdateFaculty(context.Context, *UpdateFacultyRequest) (*FacultyResponse, error)
	DeleteFaculty(context.Context, *DeleteFacultyRequest) (*DeleteFacultyResponse, error)
	ListFaculties(context.Context, *ListFacultiesRequest) (*ListFacultiesResponse, error)
	mustEmbedUnimplementedFacultyServiceServer()
}

// UnimplementedFacultyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFacultyServiceServer struct{}

func (UnimplementedFacultyServiceServer) CreateFaculty(context.Context, *CreateFacultyRequest) (*FacultyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFaculty not implemented")
}
func (UnimplementedFacultyServiceServer) GetFaculty(context.Context, *GetFacultyRequest) (*FacultyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFaculty not implemented")
}
func (UnimplementedFacultyServiceServer) UpdateFaculty(context.Context, *UpdateFacultyRequest) (*FacultyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFaculty not implemented")
}
func (UnimplementedFacultyServiceServer) DeleteFaculty(context.Context, *DeleteFacultyRequest) (*DeleteFacultyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFaculty not implemented")
}
func (UnimplementedFacultyServiceServer) ListFaculties(context.Context, *ListFacultiesRequest) (*ListFacultiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFaculties not implemented")
}
func (UnimplementedFacultyServiceServer) mustEmbedUnimplementedFacultyServiceServer() {}
func (UnimplementedFacultyServiceServer) testEmbeddedByValue()                        {}

// UnsafeFacultyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FacultyServiceServer will
// result in compilation errors.
type UnsafeFacultyServiceServer interface {
	mustEmbedUnimplementedFacultyServiceServer()
}

func RegisterFacultyServiceServer(s grpc.ServiceRegistrar, srv FacultyServiceServer) {
	// If the following call pancis, it indicates UnimplementedFacultyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FacultyService_ServiceDesc, srv)
}

func _FacultyService_CreateFaculty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFacultyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacultyServiceServer).CreateFaculty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacultyService_CreateFaculty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacultyServiceServer).CreateFaculty(ctx, req.(*CreateFacultyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacultyService_GetFaculty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFacultyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacultyServiceServer).GetFaculty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacultyService_GetFaculty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacultyServiceServer).GetFaculty(ctx, req.(*GetFacultyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacultyService_UpdateFaculty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFacultyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacultyServiceServer).UpdateFaculty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacultyService_UpdateFaculty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacultyServiceServer).UpdateFaculty(ctx, req.(*UpdateFacultyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacultyService_DeleteFaculty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFacultyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacultyServiceServer).DeleteFaculty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacultyService_DeleteFaculty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacultyServiceServer).DeleteFaculty(ctx, req.(*DeleteFacultyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacultyService_ListFaculties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFacultiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacultyServiceServer).ListFaculties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacultyService_ListFaculties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacultyServiceServer).ListFaculties(ctx, req.(*ListFacultiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FacultyService_ServiceDesc is the grpc.ServiceDesc for FacultyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FacultyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "faculty.FacultyService",
	HandlerType: (*FacultyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFaculty",
			Handler:    _FacultyService_CreateFaculty_Handler,
		},
		{
			MethodName: "GetFaculty",
			Handler:    _FacultyService_GetFaculty_Handler,
		},
		{
			MethodName: "UpdateFaculty",
			Handler:    _FacultyService_UpdateFaculty_Handler,
		},
		{
			MethodName: "DeleteFaculty",
			Handler:    _FacultyService_DeleteFaculty_Handler,
		},
		{
			MethodName: "ListFaculties",
			Handler:    _FacultyService_ListFaculties_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/faculty.proto",
}
