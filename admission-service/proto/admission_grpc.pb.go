// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/admission.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdmissionService_ApplyAdmission_FullMethodName = "/admission.AdmissionService/ApplyAdmission"
	AdmissionService_GetAdmission_FullMethodName   = "/admission.AdmissionService/GetAdmission"
	AdmissionService_ListAdmissions_FullMethodName = "/admission.AdmissionService/ListAdmissions"
)

// AdmissionServiceClient is the client API for AdmissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdmissionServiceClient interface {
	ApplyAdmission(ctx context.Context, in *ApplyAdmissionRequest, opts ...grpc.CallOption) (*AdmissionResponse, error)
	GetAdmission(ctx context.Context, in *GetAdmissionRequest, opts ...grpc.CallOption) (*AdmissionResponse, error)
	ListAdmissions(ctx context.Context, in *ListAdmissionsRequest, opts ...grpc.CallOption) (*ListAdmissionsResponse, error)
}

type admissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdmissionServiceClient(cc grpc.ClientConnInterface) AdmissionServiceClient {
	return &admissionServiceClient{cc}
}

func (c *admissionServiceClient) ApplyAdmission(ctx context.Context, in *ApplyAdmissionRequest, opts ...grpc.CallOption) (*AdmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdmissionResponse)
	err := c.cc.Invoke(ctx, AdmissionService_ApplyAdmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admissionServiceClient) GetAdmission(ctx context.Context, in *GetAdmissionRequest, opts ...grpc.CallOption) (*AdmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdmissionResponse)
	err := c.cc.Invoke(ctx, AdmissionService_GetAdmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admissionServiceClient) ListAdmissions(ctx context.Context, in *ListAdmissionsRequest, opts ...grpc.CallOption) (*ListAdmissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdmissionsResponse)
	err := c.cc.Invoke(ctx, AdmissionService_ListAdmissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdmissionServiceServer is the server API for AdmissionService service.
// All implementations must embed UnimplementedAdmissionServiceServer
// for forward compatibility.
type AdmissionServiceServer interface {
	ApplyAdmission(context.Context, *ApplyAdmissionRequest) (*AdmissionResponse, error)
	GetAdmission(context.Context, *GetAdmissionRequest) (*AdmissionResponse, error)
	ListAdmissions(context.Context, *ListAdmissionsRequest) (*ListAdmissionsResponse, error)
	mustEmbedUnimplementedAdmissionServiceServer()
}

// UnimplementedAdmissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdmissionServiceServer struct{}

func (UnimplementedAdmissionServiceServer) ApplyAdmission(context.Context, *ApplyAdmissionRequest) (*AdmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyAdmission not implemented")
}
func (UnimplementedAdmissionServiceServer) GetAdmission(context.Context, *GetAdmissionRequest) (*AdmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdmission not implemented")
}
func (UnimplementedAdmissionServiceServer) ListAdmissions(context.Context, *ListAdmissionsRequest) (*ListAdmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdmissions not implemented")
}
func (UnimplementedAdmissionServiceServer) mustEmbedUnimplementedAdmissionServiceServer() {}
func (UnimplementedAdmissionServiceServer) testEmbeddedByValue()                          {}

// UnsafeAdmissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdmissionServiceServer will
// result in compilation errors.
type UnsafeAdmissionServiceServer interface {
	mustEmbedUnimplementedAdmissionServiceServer()
}

func RegisterAdmissionServiceServer(s grpc.ServiceRegistrar, srv AdmissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdmissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdmissionService_ServiceDesc, srv)
}

func _AdmissionService_ApplyAdmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyAdmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).ApplyAdmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmissionService_ApplyAdmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).ApplyAdmission(ctx, req.(*ApplyAdmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmissionService_GetAdmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).GetAdmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmissionService_GetAdmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).GetAdmission(ctx, req.(*GetAdmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmissionService_ListAdmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).ListAdmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmissionService_ListAdmissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).ListAdmissions(ctx, req.(*ListAdmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdmissionService_ServiceDesc is the grpc.ServiceDesc for AdmissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdmissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admission.AdmissionService",
	HandlerType: (*AdmissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyAdmission",
			Handler:    _AdmissionService_ApplyAdmission_Handler,
		},
		{
			MethodName: "GetAdmission",
			Handler:    _AdmissionService_GetAdmission_Handler,
		},
		{
			MethodName: "ListAdmissions",
			Handler:    _AdmissionService_ListAdmissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/admission.proto",
}
